(in-package #:org.shirakumo.fraf.trial.particle-studio)

(defvar *emitter-counter* 1)

(define-shader-pass ui (trial-alloy:base-ui)
  ())

(defmethod setup-ui ((ui ui))
  (trial-alloy:show-panel 'base-panel))

(defclass base-panel (trial-alloy:fullscreen-panel)
  ((sidebar :accessor sidebar)))

(defmethod initialize-instance :after ((panel base-panel) &key)
  (let* ((focus (make-instance 'alloy:focus-list))
         (layout (make-instance 'alloy:border-layout))
         (menu (alloy:with-menu
                 ("File"
                  ("New")
                  ("Load...")
                  :separator
                  ("Save")
                  ("Save As...")
                  :separator
                  ("Quit" (quit *context*)))
                 ("Edit"
                  ("Add Emitter" (add-emitter panel))))))
    (setf (sidebar panel) (make-instance 'alloy:section-list))
    (let ((side (make-instance 'alloy:sidebar :focus-parent focus :layout (sidebar panel))))
      (alloy:enter side layout :place :west :size (alloy:un 350)))
    (alloy:enter menu layout :place :north :size (alloy:un 30))
    (alloy:enter menu focus)
    (alloy:finish-structure panel layout focus)))

(defmethod add-emitter ((panel base-panel) &rest args)
  (enter-and-load (apply #'make-instance 'cpu-particle-emitter
                         :name (generate-name "EMITTER")
                         args)
                  (scene +main+) +main+))

(defmethod serialize ((panel base-panel))
  (let ((data ()))
    (do-scene-tree (thing (scene +main+))
      (when (typep thing 'emitter)
        (push (serialize thing) data)))
    (nreverse data)))

(defmethod clear ((panel base-panel))
  (do-scene-tree (thing (scene +main+))
    (when (typep thing 'emitter)
      (leave thing T))))

(defmethod load-system ((source stream) (panel base-panel))
  (loop for f = (read source NIL #1='#:eof)
        until (eq f #1#)
        do (apply #'add-emitter panel f)))

(defmethod load-system ((path pathname) (panel base-panel))
  (with-open-file (stream path :direction :input)
    (load-system stream panel)))

(defmethod load-system ((path string) (panel base-panel))
  (load-system (pathname-utils:parse-native-namestring path) panel))

(defmethod save-system ((target stream) (panel base-panel))
  (format stream "~&;;; Generated by trial-particle-studio")
  (do-scene-tree (thing (scene +main+))
    (when (typep thing 'emitter)
      (format stream "~%(~{~s ~s~^~% ~})~%" (serialize thing)))))

(defmethod save-system ((path pathname) (panel base-panel))
  (with-open-file (stream path :direction :output :if-exists :supersede)
    (save-system stream panel)))

(defmethod save-system ((path string) (panel base-panel))
  (save-system (pathname-utils:parse-native-namestring path) panel))
