(defpackage #:org.shirakumo.fraf.trial.v-clip
  (:use #:cl #:3d-vectors #:3d-matrices)
  (:export))

(in-package #:org.shirakumo.fraf.trial.v-clip)

(defstruct transform-cache
  (feature NIL :type T)
  (location (vec 0 0 0) :type vec3)
  (tail (vec 0 0 0) :type vec3)
  (head (vec 0 0 0) :type vec3)
  (segment (vec 0 0 0) :type vec3))

(defun cache-vertex (mat vertex cache)
  (unless (eq vertex (transform-cache-feature cache))
    (n*m mat (v<- (transform-cache-location cache) (vertex-location vertex)))
    (setf (transform-cache-feature cache) vertex)))

(defun cache-edge* (cache)
  (v<- (transform-cache-segment cache) (transform-cache-head cache))
  (nv- (transform-cache-segment cache) (transform-cache-tail cache)))

(defun cache-edge (mat edge cache)
  (unless (eq edge (transform-cache-feature cache))
    (n*m mat (v<- (transform-cache-tail cache) (edge-tail edge)))
    (n*m mat (v<- (transform-cache-head cache) (edge-head edge)))
    (cache-edge* cache)
    (setf (transform-cache-feature cache) edge)))

(defstruct state
  (a (vec 0 0 0) :type vec3)
  (b (vec 0 0 0) :type vec3)
  (distance 0.0 :type single-float)
  (lf NIL :type T)
  (rf NIL :type T))

(defstruct plane
  (normal (vec 0 0 0) :type vec3)
  (offset 0.0 :type single-float))

(defun plane-distance (plane vertex)
  (+ (v. (plane-normal plane) vertex) (plane-offset plane)))

(defstruct vertex
  (location (vec 0 0 0) :type vec3)
  (cone NIL :type list))

(defstruct edge
  (tail NIL :type vertex)
  (head NIL :type vertex)
  (left NIL :type face)
  (right NIL :type face)
  (length 0.0 :type single-float)
  (direction (vec 0 0 0) :type vec3)
  (tplane NIL :type plane)
  (hplane NIL :type plane)
  (lplane NIL :type plane)
  (rplane NIL :type plane))

(defstruct face
  (plane NIl :type plane)
  (cone NIL :type list))

(defstruct cone
  (plane NIL :type plane)
  (neighbor NIL))

(defstruct (vertex-cone (:include cone)))

(defstruct (face-cone (:include cone))
  (ccw NIL)
  (cw NIL)
  (index 0 :type (integer 0 2)))

(defmacro define-tester (name args &body body)
  `(defun ,name (state ,@(cddr args))
     (let ((,(first args) (state-lf state))
           (,(second args) (state-rf state)))
       (flet ((next ()
                (setf (state-lf state) ,(first args))
                (setf (state-rf state) ,(second args))
                (return-from ,name :continue))
              (finish (result &optional a b distance)
                (when a (v<- (state-a state) a))
                (when b (v<- (state-b state) b))
                (setf (state-distance state) (or distance
                                                 (vdistance (state-a state) (state-b state))))
                (return-from ,name result)))
         (declare (inline next finish))
         ,@body))))

(define-tester vertex-vertex (v1 v2 cv1 cv2 m1 m2)
  (cache-vertex m2 v2 cv2)
  (dolist (cone (vertex-cone v1))
    (when (< (plane-distance (cone-plane cone) (transform-cache-location cv2)) 0)
      (setf v1 (cone-neighbor cone))
      (next)))
  
  (cache-vertex m1 v1 cv1)
  (dolist (cone (vertex-cone v2))
    (when (< (plane-distance (cone-plane cone) (transform-cache-location cv1)) 0)
      (setf v2 (cone-neighbor cone))
      (next)))

  (finish (if (< 0 (state-distance state)) :disjoint :penetration)
          (vertex-location v1)
          (vertex-location v2)))

(define-tester vertex-face (v f cv m mesh)
  (cache-vertex m v cv)
  (let ((updated NIL)
        (dmin 0.0))
    (dolist (cone (face-cone f))
      (let ((d (plane-distance (cone-plane cone) (transform-cache-location cv))))
        (when (< d dmin)
          (setf f (cone-neighbor cone))
          (setf dmin d)
          (setf updated T))))
    (when updated (next)))

  (let ((d (plane-distance (face-plane f) (transform-cache-location cv)))
        (d2 0.0)
        (xother (vec3 0 0 0)))
    (declare (dynamic-extent xother))
    (when (= 0 d)
      (finish :penetration
              (vertex-location v)
              (transform-cache-location cv)))
    (dolist (cone (vertex-cone v))
      (let ((edge (cone-neighbor cone)))
        (v<- xother (vertex-location
                     (if (eq v (edge-tail edge))
                         (edge-head edge)
                         (edge-tail edge))))
        (n*m m xother)
        (setf d2 (plane-distance (face-plane f) xother))
        (when (or (and (< d 0) (< d d2))
                  (and (< 0 d) (< d2 d)))
          (v<- (transform-cache-tail cv) (transform-cache-location cv))
          (v<- (transform-cache-head cv) xother)
          (unless (eq v (edge-tail edge))
            (rotatef (transform-cache-tail cv) (transform-cache-head cv)))
          (cache-line* cv)
          (setf (transform-cache-feature cv) edge)
          (setf v edge)
          (next))))
    (when (< 0 d)
      (finish :disjoint
              (vertex-location v)
              (nv+* (vcopy (transform-cache-location cv))
                    (plane-normal (face-plane f)) (- d))
              d))

    (dolist (face (mesh-faces mesh))
      (let ((d2 (plane-distance (face-plane face) (transform-cache-location cv))))
        (when (< d d2)
          (setf d d2)
          (setf f face))))
    (when (< 0 d)
      (next))
    (finish :penetration
            (vertex-location v)
            (nv+* (transform-cache-location cv) (plane-normal (face-plane f)) (- d))
            d)))

(define-tester vertex-edge (v e cv ce mve mev)
  (cache-vertex mve v cv)
  (when (< 0 (plane-distance (edge-tplane e) (transform-cache-location cv)))
    (setf e (edge-tail e)) (next))
  (when (< 0 (plane-distance (edge-hplane e) (transform-cache-location cv)))
    (setf e (edge-head e)) (next))
  (when (< 0 (plane-distance (edge-lplane e) (transform-cache-location cv)))
    (setf e (edge-left e)) (next))
  (when (< 0 (plane-distance (edge-rplane e) (transform-cache-location cv)))
    (setf e (edge-right e)) (next))

  (cache-edge mev e ce)
  (let ((min 0) (max 1) min-neighbor max-neighbor)
    (dolist (cone (vertex-cone v))
      (let ((dt (plane-distance (cone-plane cone) (transform-cache-tail ce)))
            (dh (plane-distance (cone-plane cone) (transform-cache-head ce))))
        (if (<= 0 dt)
            (when (and (not (<= 0 dh)) (< (/ dt (- dt dh)) max))
              (setf max (/ dt (- dt dh)))
              (setf max-neighbor (cone-neighbor cone))
              (when (< max min) (return)))
            (cond ((< dh 0)
                   (setf min-neighbor (cone-neighbor cone))
                   (setf max-neighbor (cone-neighbor cone)))
                  ((< min (/ dt (- dt dh)))
                   (setf min (/ dt (- dt dh)))
                   (setf min-neighbor (cone-neighbor cone))
                   (when (< max min) (return)))))))

    (when (and min-neighbor (eq min-neighbor max-neighbor))
      (setf v min-neighbor)
      (next))

    (when min-neighbor
      (let ((offset (nv- (nv+* (vcopy (edge-tail e)) (transform-cache-segment ce) min)
                         (vertex-location v))))
        (when (v= offset 0)
          (finish :penetration
                  (vertex-location v)
                  (transform-cache-location cv)))
        (when (< 0 (v. offset (transform-cache-segment ce)))
          (setf v min-neighbor)
          (next))))

    (when max-neighbor
      (let ((offset (nv- (nv+* (vcopy (edge-tail e)) (transform-cache-segment ce) max)
                         (vertex-location v))))
        (when (v= offset 0)
          (finish :penetration
                  (vertex-location v)
                  (transform-cache-location cv)))
        (when (< 0 (v. offset (transform-cache-segment ce)))
          (setf v max-neighbor)
          (next))))

    (let ((h (v- (transform-cache-location cv)
                 (vertex-location (edge-tail e)))))
      (finish :disjoint
              (vertex-location v)
              (nv+* (vcopy (vertex-location (edge-tail e)))
                    (edge-direction e) (v. h (edge-direction e)))
              (vdistance (state-b state) (transform-cache-location cv))))))

(defun edge-edge-subtest (e ce cp)
  (flet ((next (v)
           (return-from edge-edge-subtest
             (values v e cp))))
    (let ((min 0) (max 1) min-neighbor max-neighbor)
      ;; Check tail and head planes
      (flet ((clip (plane neighbor)
               (let ((dt (- (plane-distance plane (transform-cache-tail ce))))
                     (dh (- (plane-distance plane (transform-cache-head ce)))))
                 (cond ((< dt 0)
                        (when (< dh 0)
                          (setf e neighbor)
                          (next :continue))
                        (setf min (/ dt (- dt dh)))
                        (setf min-neighbor neighbor))
                       ((< dh 0)
                        (setf max (/ dt (- dt dh)))
                        (setf max-neighbor neighbor))))))
        (clip (edge-tplane e) (edge-tail e))
        (clip (edge-hplane e) (edge-head e)))
      (let ((vmin-neighbor min-neighbor)
            (vmax-neighbor max-neighbor)
            (vmin min) (vmax max))
        ;; Check left and right planes
        (labels ((vertex (extremum neighbor comp)
                   (let ((p (nv- (nv+ (v* (transform-cache-segment ce) extremum)
                                      (transform-cache-tail ce))
                                 (vertex-location neighbor))))
                     (when (v= p 0)
                       ;; FIXME: return changed values
                       (setf cp (vertex-location neighbor))
                       (next :penetration))
                     (when (funcall comp (v. p (transform-cache-segment ce)))
                       (setf e neighbor)
                       (next :continue))))
                 (side (plane neighbor)
                   (let ((dt (- (plane-distance plane (transform-cache-tail ce))))
                         (dh (- (plane-distance plane (transform-cache-head ce)))))
                     (cond ((< dt 0)
                            (cond ((< dh 0)
                                   (when vmin-neighbor
                                     (vertex vmin vmin-neighbor #'plusp))
                                   (when vmax-neighbor
                                     (vertex vmax vmax-neighbor #'minusp))
                                   (setf e neighbor)
                                   (next :continue))
                                  ((< min (/ dt (- dt dh)))
                                   (setf min (/ dt (- dt dh)))
                                   (setf min-neighbor neighbor)
                                   (< max min))))
                           ((< dh 0)
                            (when (< (/ dt (- dt dh)) max)
                              (setf max (/ dt (- dt dh)))
                              (setf max-neighbor neighbor)
                              (< max min)))))))
          (when (or (side (edge-lplane e) (edge-left e))
                    (side (edge-rplane e) (edge-right e)))
            ;; e is outside the voronoi region
            (when (typep min-neighbor 'vertex)
              (vertex min min-neighbor #'>=)
              (setf e max-neighbor)
              (next :continue))
            (when (typep max-neighbor 'vertex)
              (vertex max max-neighbor #'<=)
              (setf e min-neighbor)
              (next :continue))
            (let* ((dt (plane-distance (face-plane min-neighbor) (transform-cache-tail ce)))
                   (dh (plane-distance (face-plane min-neighbor) (transform-cache-head ce)))
                   (dmin (+ dt (* min (- dh dt)))))
              (when (= 0 dmin)
                (setf cp (nv+ (v* (transform-cache-segment ce) min)
                              (transform-cache-tail ce)))
                (next :penetration))
              (setf e (if (< dmin 0)
                          (if (< dt dh) min-neighbor max-neighbor)
                          (if (< dh dt) min-neighbor max-neighbor)))
              (next :continue)))
          ;; edge intersects the voronoi region
          (etypecase min-neighbor
            (face
             (let ((dt (plane-distance (face-plane min-neighbor) (transform-cache-tail ce)))
                   (dh (plane-distance (face-plane min-neighbor) (transform-cache-head ce)))
                   (dmin (+ dt (* min (- dh dt))))
                   (dmax (if max-neighbor (+ dt (* max (- dh dt))) dh)))
               (when (= 0 dmin)
                 (setf cp (nv+ (v* (transform-cache-segment ce) min)
                               (transform-cache-tail ce)))
                 (next :penetration))
               (when (or (and (< 0 dmin) (< dmin dmax))
                         (and (< dmin 0) (< dmax dmin)))
                 (setf e min-neighbor)
                 (next :continue))))
            (vertex
             (let ((p (nv- (nv+ (v* (transform-cache-segment ce) min)
                                (transform-cache-tail ce))
                           (vertex-location min-neighbor))))
               (when (v= 0 p)
                 (setf cp (vertex-location min-neighbor))
                 (return :penetration))
               (when (< 0 (v. p (transform-cache-segment ce)))
                 (setf e min-neighbor)
                 (return :continue))))
            (null))
          ;; FIXME: might be able to deduplicate with above?
          (etypecase max-neighbor
            (face
             (let ((dt (plane-distance (face-plane min-neighbor) (transform-cache-tail ce)))
                   (dh (plane-distance (face-plane min-neighbor) (transform-cache-head ce)))
                   (dmin (if min-neighbor (+ dt (* min (- dh dt))) dt))
                   (dmax (+ dt (* max (- dh dt)))))
               (when (= 0 dmin)
                 (setf cp (nv+ (v* (transform-cache-segment ce) max)
                               (transform-cache-tail ce)))
                 (next :penetration))
               (when (or (and (< 0 dmax) (< dmax dmin))
                         (and (< dmax 0) (< dmin dmax)))
                 (setf e max-neighbor)
                 (next :continue))))
            (vertex
             (let ((p (nv- (nv+ (v* (transform-cache-segment ce) max)
                                (transform-cache-tail ce))
                           (vertex-location max-neighbor))))
               (when (v= 0 p)
                 (setf cp (vertex-location max-neighbor))
                 (return :penetration))
               (when (< 0 (v. p (transform-cache-segment ce)))
                 (setf e max-neighbor)
                 (return :continue))))
            (null))
          (next :disjoint))))))

(define-tester edge-edge (e1 e2 ce1 ce2 m12 m21)
  ;; Clip E1 against E2's cone
  (cache-edge m12 e1 ce1)
  (multiple-value-bind (result e2n cp2) (edge-edge-subtest e2 ce1 (state-b state))
    (setf e2 e2n)
    (v<- (state-b state) cp2)
    (when (eq result :penetration)
      (v<- (state-a state) cp2)
      (n*m m21 (state-a state)))
    (unless (eq result :disjoint)
      (finish result)))
  ;; Clip E2 against E1's cone
  (cache-edge m21 e2 ce2)
  (multiple-value-bind (result e1n cp1) (edge-edge-subtest e1 c2 (state-a state))
    (setf e1 e1n)
    (v<- (state-a state) cp1)
    (when (eq result :penetration)
      (v<- (state-b state) cp1)
      (n*m m12 (state-b state)))
    (unless (eq result :disjoint)
      (finish result)))
  ;; We're disjoint on both, compute closest point.
  (let* ((dir (m* x21 (edge-direction e2)))
         (k (v. dir (edge-direction e1)))
         (h (v- (transform-cache-tail ce2) (vertex-location (edge-tail e1))))
         (h2 (nv+ (v* dir (- k)) (edge-direction e1)))
         (num (v. h h2))
         (denom (- 1 (* k k))))
    (let* ((cp1 (if (= 0 denom)
                    (vertex-coordinates (if (< 0 num) (edge-head e1) (edge-tail e1)))
                    (nv+ (v* (edge-direction e1) (clamp 0 (/ num denom) (edge-length e1)))
                         (vertex-coordinates (edge-tail e1)))))
           (coords (m* x12 cp1))
           (h (v- coords (vertex-location (edge-tail e2)))))
      (finish :disjoint 
              cp1
              (nv+ (v* (edge-direction e2) (v. h (edge-direction e2)))
                   (vertex-coordinates (edge-tail e2)))))))

(define-tester edge-face (e f ce mef)
  (let ((code (make-array 3 :element-type T))
        (lam (make-array 3 :element-type 'single-float))
        (min 0) (max 1) min-cn max-cn chop-cn)
    (cache-edge mef e ce)
    (dotimes (i 3)
      (let* ((cni (aref (face-cone f) i))
             (dt (plane-distance (cone-plane cni) (transform-cache-tail ce)))
             (dh (plane-distance (cone-plane cni) (transform-cache-head ce))))
        (if (<= 0 dt)
            (cond ((<= 0 dh)
                   (setf (aref code i) :inside))
                  (T
                   (setf (aref code i) :max)
                   (when (< (/ dt (- dt dh)) max)
                     (setf max (/ dt (- dt dh)))
                     (setf max-cn cni))))
            (cond ((<= 0 dh)
                   (setf (aref code i) :min)
                   (when (< min (/ dt (- dt dh)))
                     (setf min (/ dt (- dt dh)))
                     (setf min-cn cni)))
                  (T
                   (setf (aref code i) :outside)
                   (setf chop-cn cni))))))
    (when (or chop-cn (< max min))
      (let ((cn (or chop-cn (if (< 1 (+ min max)) min-cn max-cn)))
            prev (next cn) intersected-p s)
        (loop until (eq next prev)
              for minv = NIL
              for maxv = NIL
              for i = (face-cone-index next)
              do (setf prev cn)
                 (setf cn next)
                 (setf s (neighbor cn))
                 ;; Edge plane
                 (case (aref code i)
                   (:inside (return))
                   (:outside (setf min 0 max 1))
                   (:min (setf min 0 max (aref lam i)))
                   (:max (setf min (aref lam i) max 1)))
                 (block continue
                   (flet ((plane (plane v cw ccw)
                            (let ((dt (- (plane-distance plane (transform-cache-tail ce))))
                                  (dh (- (plane-distance plane (transform-cache-head ce)))))
                              (cond ((<= 0 dt)
                                     (when (and (< dh 0) (< (/ dt (- dt dh)) max))
                                       (setf max (/ dt (- dt dh)))
                                       (setf maxv v)
                                       (when (< max min)
                                         (when intersected-p (loop-finish))
                                         (setf next (if (eq (edge-left s) f) cw ccw))
                                         (return-from continue))))
                                    (T
                                     (when (< dh 0)
                                       (setf next (if (eq (edge-left s) f) cw ccw))
                                       (return-from continue))
                                     (when (< min (/ (dt (- dt dh))))
                                       (setf min (/ (dt (- dt dh))))
                                       (setf minv v)
                                       (when (< max min)
                                         (when intersected-p (loop-finish))
                                         (setf next (if (eq (edge-left s) f) cw ccw))
                                         (return-from continue))))))))
                     ;; Tail and Head planes
                     (plane (edge-tplane s) (edge-tail s) (face-cone-cw cn) (face-cone-ccw cn))
                     (plane (edge-hplane s) (edge-head s) (face-cone-ccw cn) (face-cone-cw cn)))
                   (setf intersect 1)
                   (when minv
                     (let ((p (nv- (nv+ (v* (transform-cache-segment ce) min)
                                        (transform-cache-tail ce))
                                   (vertex-coordinates minv))))
                       (when (< 0 (v. p (transform-cache-segment ce)))
                         (setf next (if (eq f (edge-left s))
                                        (if (eq minv (edge-tail s)) (face-cone-cw cn) (face-cone-ccw cn))
                                        (if (eq minv (edge-tail s)) (face-cone-ccw cn) (face-cone-cw cn))))
                         (return-from continue))))
                   (when maxv
                     (let ((p (nv- (nv+ (v* (transform-cache-segment ce) max)
                                        (transform-cache-tail ce))
                                   (vertex-coordinates maxv))))
                       (when (< (v. p (transform-cache-segment ce)) 0)
                         (setf next (if (eq f (edge-left s))
                                        (if (eq maxv (edge-head s)) (face-cone-ccw cn) (face-cone-cw cn))
                                        (if (eq maxv (edge-head s)) (face-cone-cw cn) (face-cone-ccw cn))))
                         (return-from continue)))))
                 (setf f s)
                 (next))
        (setf f (if (eq prev (face-cone-ccw cn))
                    (if (eq f (edge-left f)) (edge-head s) (edge-tail s))
                    (if (eq f (edge-left f)) (edge-tail s) (edge-head s))))
        (next)))
    ;; Edge intersects faces cone
    (let* ((dt (- (plane-distance (face-plane f) (transform-cache-tail ce))))
           (dh (- (plane-distance (face-plane f) (transform-cache-head ce))))
           (dmin (if min-cn (+ dt (* min (- dh dt))) dt))
           (dmax (if max-cn (+ dt (* max (- dh dt))) dh)))
      (flet ((penetrate (length d-length)
               (finish :penetration
                       (nv+ (v* (edge-direction e) length (edge-length e))
                            (vertex-coordinates (edge-tail e)))
                       (nv+* (nv+ (v* (transform-cache-segment ce) length)
                                  (transform-cache-tail ce))
                             (plane-normal (face-plane f)) (- d-length))
                       d-length)))
        (cond ((<= dmin 0)
               (when (<= 0 dmax)
                 (penetrate min dmin)))
              ((<= dmax 0)
               (penetrate max dmax))))
      ;; 
      (cond ((or (and (< 0 dmin) (<= dt dh))
                 (and (< dmin 0) (<= dh dt)))
             (cond (min-cn
                    (setf f (cone-neighbor min-cn)))
                   (T
                    (v<- (transform-cache-location ce) (transform-cache-tail ce))
                    (setf e (edge-tail e))
                    (setf (transform-cache-feature ce) e))))
            (max-cn
             (setf f (cone-neighbor max-cn)))
            (T
             (v<- (transform-cache-location ce) (transform-cache-head ce))
             (setf e (edge-head e))
             (setf (transform-cache-feature ce) e)))
      (next))))

(defun vclip-mesh (mesh1 mesh2 m12 m21 &key (max-iterations 5000) state)
  ;; FIXME: dunno if the A B initialisation here is ok.
  (let ((state (or state (make-state :a (m* m12 (vec 0 0 0))
                                     :b (m* m21 (vec 0 0 0))
                                     :lf (aref (mesh-vertices mesh1) 0)
                                     :rf (aref (mesh-vertices mesh2) 0))))
        (cf1 (make-transform-cache))
        (cf2 (make-transform-cache)))
    (dotimes (i max-iterations (values state NIL))
      (flet ((swap ()
               (rotatef (state-a state) (state-b state))
               (rotatef (state-lf state) (state-rf state)))
             (test (fun &rest args)
               (let ((result (apply fun state args)))
                 (unless (eq result :continue)
                   (return (values state result))))))
        (etypecase (state-lf state)
          (vertex
           (etypecase (state-rf state)
             (vertex (test #'vertex-vertex cf1 cf2 m12 m21))
             (edge (test #'vertex-edge cf1 cf2 m12 m21))
             (face (test #'vertex-face cf1 cf2 m12 m21 mesh2))))
          (edge
           (etypecase (state-rf state)
             (vertex (swap) (test #'vertex-edge cf2 cf1 m21 m12))
             (edge (test #'edge-edge cf1 cf2 m12 m21))
             (face (test #'edge-face cf1 cf2 m12 m21))))
          (face
           (etypecase (state-rf state)
             (vertex (swap) (test #'vertex-face cf2 cf1 m21 m12 mesh1))
             (edge (swap) (test #'edge-face cf2 cf1 m21 m12)))))))))

(defun vclip-poly-tree (tree1 tree2 m12 m21 &key (max-iterations 5000))
  )
